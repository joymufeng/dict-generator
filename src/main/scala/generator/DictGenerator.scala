package generator

import scala.collection.mutable.ListBuffer

/**
 * A method of generating all char sequences according to a list of chars, which is based on the simulation of n-ary's mathematical manipulation.
 * For example, for char list  List('a', 'b', 'c'), while set maxWordLength=2, it will generate the following char sequences,
 * List("a", "b", "c", "ba", "bb", "bc", "ca", "cb", "cc")
 * Because this method treats the first char 'a' as minimal value, you can imagine it as 0 in decimal number, so aa equals to a. That means, if you set maxWordLength=2,
 * for the char sequences whose length less than 2, you should manually add the additional char sequence that is prefixed with one or more 'a'. According to above example,
 * you should manually add the following additional char sequences:
 * List("aa", "ab", "ac")
 *
 */
object DictGenerator {

   def main(args: Array[String]) {
     generate(('a' to 'c').toList, 2).foreach(println _)
   }

  /***
    * Generate all char sequences according to a list of chars
    * @param chars The char list for generating char sequences
    * @param maxWordLength Limit the max length of the output char sequence
    * @return The char sequences generated by param chars.
    */
   def generate(chars: List[Char], maxWordLength: Int): List[String] = {
     val EndsWithMax = (".*?(" + chars.last + "+)$").r

     def incWord(word: String): String ={
       if(word.last != chars.last){
         word.take(word.length - 1) + incChar(word.last)
       } else {
         val EndsWithMax(maxSeq) = word
         if(maxSeq != word){
           val fixedLength = word.length - maxSeq.length - 1
           word.take(fixedLength) + incChar(word.charAt(fixedLength)) + chars.head.toString * maxSeq.length
         } else {
           chars(1).toString + chars.head.toString * word.length
         }
       }
     }

     def incChar(char: Char) = {
       if(char != chars.last){
         chars(chars.indexOf(char) + 1)
       } else {
         chars.head
       }
     }

    if(chars.length >= 0){
      val maxWord = chars.last.toString * maxWordLength
      val wordsBuf = ListBuffer[String]()
      var word = chars(0).toString
      while(word != maxWord){
        wordsBuf += word
        word = incWord(word)
        //println(word)
      }
      wordsBuf += maxWord
      wordsBuf.toList
    } else {
      Nil
    }
   }
 }
